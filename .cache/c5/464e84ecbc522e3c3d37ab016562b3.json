{"id":"node_modules/aproba/index.js","dependencies":[{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/package.json","includedInParent":true,"mtime":1601675144339},{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/.babelrc","includedInParent":true,"mtime":1599428702971},{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/aproba/package.json","includedInParent":true,"mtime":1601674935575}],"generated":{"js":"'use strict'\n\nfunction isArguments (thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')\n}\n\nvar types = {\n  '*': {label: 'any', check: function () { return true }},\n  A: {label: 'array', check: function (thingy) { return Array.isArray(thingy) || isArguments(thingy) }},\n  S: {label: 'string', check: function (thingy) { return typeof thingy === 'string' }},\n  N: {label: 'number', check: function (thingy) { return typeof thingy === 'number' }},\n  F: {label: 'function', check: function (thingy) { return typeof thingy === 'function' }},\n  O: {label: 'object', check: function (thingy) { return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy) }},\n  B: {label: 'boolean', check: function (thingy) { return typeof thingy === 'boolean' }},\n  E: {label: 'error', check: function (thingy) { return thingy instanceof Error }},\n  Z: {label: 'null', check: function (thingy) { return thingy == null }}\n}\n\nfunction addSchema (schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || []\n  if (group.indexOf(schema) === -1) group.push(schema)\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')\n  if (!args) throw missingRequiredArg(1, 'args')\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args)\n  var schemas = rawSchemas.split('|')\n  var arity = {}\n\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii]\n      if (!types[type]) throw unknownType(ii, type)\n    }\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema)\n    addSchema(schema, arity)\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity)\n      addSchema(schema.replace(/E/, 'Z'), arity)\n      if (schema.length === 1) addSchema('', arity)\n    }\n  })\n  var matching = arity[args.length]\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length)\n  }\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii]\n      var typeCheck = types[type].check\n      return typeCheck(args[ii])\n    })\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label\n      }).filter(function (schema) { return schema != null })\n      throw invalidType(ii, labels, args[ii])\n    }\n    matching = newMatching\n  }\n}\n\nfunction missingRequiredArg (num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))\n}\n\nfunction unknownType (num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))\n}\n\nfunction invalidType (num, expectedTypes, value) {\n  var valueType\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label\n  })\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +\n    englishList(expectedTypes) + ' but got ' + valueType)\n}\n\nfunction englishList (list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1')\n}\n\nfunction wrongNumberOfArgs (expected, got) {\n  var english = englishList(expected)\n  var args = expected.every(function (ex) { return ex.length === 1 })\n    ? 'argument'\n    : 'arguments'\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)\n}\n\nfunction moreThanOneError (schema) {\n  return newException('ETOOMANYERRORTYPES',\n    'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"')\n}\n\nfunction newException (code, msg) {\n  var e = new Error(msg)\n  e.code = code\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate)\n  return e\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/aproba/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/aproba/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}}],"sources":{"node_modules/aproba/index.js":"'use strict'\n\nfunction isArguments (thingy) {\n  return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')\n}\n\nvar types = {\n  '*': {label: 'any', check: function () { return true }},\n  A: {label: 'array', check: function (thingy) { return Array.isArray(thingy) || isArguments(thingy) }},\n  S: {label: 'string', check: function (thingy) { return typeof thingy === 'string' }},\n  N: {label: 'number', check: function (thingy) { return typeof thingy === 'number' }},\n  F: {label: 'function', check: function (thingy) { return typeof thingy === 'function' }},\n  O: {label: 'object', check: function (thingy) { return typeof thingy === 'object' && thingy != null && !types.A.check(thingy) && !types.E.check(thingy) }},\n  B: {label: 'boolean', check: function (thingy) { return typeof thingy === 'boolean' }},\n  E: {label: 'error', check: function (thingy) { return thingy instanceof Error }},\n  Z: {label: 'null', check: function (thingy) { return thingy == null }}\n}\n\nfunction addSchema (schema, arity) {\n  var group = arity[schema.length] = arity[schema.length] || []\n  if (group.indexOf(schema) === -1) group.push(schema)\n}\n\nvar validate = module.exports = function (rawSchemas, args) {\n  if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)\n  if (!rawSchemas) throw missingRequiredArg(0, 'rawSchemas')\n  if (!args) throw missingRequiredArg(1, 'args')\n  if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)\n  if (!types.A.check(args)) throw invalidType(1, ['array'], args)\n  var schemas = rawSchemas.split('|')\n  var arity = {}\n\n  schemas.forEach(function (schema) {\n    for (var ii = 0; ii < schema.length; ++ii) {\n      var type = schema[ii]\n      if (!types[type]) throw unknownType(ii, type)\n    }\n    if (/E.*E/.test(schema)) throw moreThanOneError(schema)\n    addSchema(schema, arity)\n    if (/E/.test(schema)) {\n      addSchema(schema.replace(/E.*$/, 'E'), arity)\n      addSchema(schema.replace(/E/, 'Z'), arity)\n      if (schema.length === 1) addSchema('', arity)\n    }\n  })\n  var matching = arity[args.length]\n  if (!matching) {\n    throw wrongNumberOfArgs(Object.keys(arity), args.length)\n  }\n  for (var ii = 0; ii < args.length; ++ii) {\n    var newMatching = matching.filter(function (schema) {\n      var type = schema[ii]\n      var typeCheck = types[type].check\n      return typeCheck(args[ii])\n    })\n    if (!newMatching.length) {\n      var labels = matching.map(function (schema) {\n        return types[schema[ii]].label\n      }).filter(function (schema) { return schema != null })\n      throw invalidType(ii, labels, args[ii])\n    }\n    matching = newMatching\n  }\n}\n\nfunction missingRequiredArg (num) {\n  return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))\n}\n\nfunction unknownType (num, type) {\n  return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))\n}\n\nfunction invalidType (num, expectedTypes, value) {\n  var valueType\n  Object.keys(types).forEach(function (typeCode) {\n    if (types[typeCode].check(value)) valueType = types[typeCode].label\n  })\n  return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +\n    englishList(expectedTypes) + ' but got ' + valueType)\n}\n\nfunction englishList (list) {\n  return list.join(', ').replace(/, ([^,]+)$/, ' or $1')\n}\n\nfunction wrongNumberOfArgs (expected, got) {\n  var english = englishList(expected)\n  var args = expected.every(function (ex) { return ex.length === 1 })\n    ? 'argument'\n    : 'arguments'\n  return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)\n}\n\nfunction moreThanOneError (schema) {\n  return newException('ETOOMANYERRORTYPES',\n    'Only one error type per argument signature is allowed, more than one found in \"' + schema + '\"')\n}\n\nfunction newException (code, msg) {\n  var e = new Error(msg)\n  e.code = code\n  if (Error.captureStackTrace) Error.captureStackTrace(e, validate)\n  return e\n}\n"},"lineCount":106}},"error":null,"hash":"e50ad0382b91829c3648dfd038941af1","cacheData":{"env":{}}}