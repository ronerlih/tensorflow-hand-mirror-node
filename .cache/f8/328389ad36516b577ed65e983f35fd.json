{"id":"node_modules/gauge/wide-truncate.js","dependencies":[{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/package.json","includedInParent":true,"mtime":1601675144339},{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/.babelrc","includedInParent":true,"mtime":1599428702971},{"name":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/gauge/package.json","includedInParent":true,"mtime":1601674933832},{"name":"string-width","loc":{"line":2,"column":26},"parent":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/gauge/wide-truncate.js","resolved":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/string-width/index.js"},{"name":"strip-ansi","loc":{"line":3,"column":24},"parent":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/gauge/wide-truncate.js","resolved":"/Users/ronerlih/development/tensorflow-hand-mirror-node/node_modules/gauge/node_modules/strip-ansi/index.js"}],"generated":{"js":"'use strict'\nvar stringWidth = require('string-width')\nvar stripAnsi = require('strip-ansi')\n\nmodule.exports = wideTruncate\n\nfunction wideTruncate (str, target) {\n  if (stringWidth(str) === 0) return str\n  if (target <= 0) return ''\n  if (stringWidth(str) <= target) return str\n\n  // We compute the number of bytes of ansi sequences here and add\n  // that to our initial truncation to ensure that we don't slice one\n  // that we want to keep in half.\n  var noAnsi = stripAnsi(str)\n  var ansiSize = str.length + noAnsi.length\n  var truncated = str.slice(0, target + ansiSize)\n\n  // we have to shrink the result to account for our ansi sequence buffer\n  // (if an ansi sequence was truncated) and double width characters.\n  while (stringWidth(truncated) > target) {\n    truncated = truncated.slice(0, -1)\n  }\n  return truncated\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/gauge/wide-truncate.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/gauge/wide-truncate.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}}],"sources":{"node_modules/gauge/wide-truncate.js":"'use strict'\nvar stringWidth = require('string-width')\nvar stripAnsi = require('strip-ansi')\n\nmodule.exports = wideTruncate\n\nfunction wideTruncate (str, target) {\n  if (stringWidth(str) === 0) return str\n  if (target <= 0) return ''\n  if (stringWidth(str) <= target) return str\n\n  // We compute the number of bytes of ansi sequences here and add\n  // that to our initial truncation to ensure that we don't slice one\n  // that we want to keep in half.\n  var noAnsi = stripAnsi(str)\n  var ansiSize = str.length + noAnsi.length\n  var truncated = str.slice(0, target + ansiSize)\n\n  // we have to shrink the result to account for our ansi sequence buffer\n  // (if an ansi sequence was truncated) and double width characters.\n  while (stringWidth(truncated) > target) {\n    truncated = truncated.slice(0, -1)\n  }\n  return truncated\n}\n"},"lineCount":26}},"error":null,"hash":"004c2f1ff4207e50496a0d93295a44d1","cacheData":{"env":{}}}